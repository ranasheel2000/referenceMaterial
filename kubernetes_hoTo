**************************************************************************************************************
************************               SINGLE NODE SETUP(MINIKUBE)                    ************************
**************************************************************************************************************

Install VirtualBox on linux(Ubuntu)
==================================
sudo apt-get update
sudo apt-get upgrade

wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -
wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add -

sudo add-apt-repository "deb http://download.virtualbox.org/virtualbox/debian `lsb_release -cs` contrib"

sudo apt-get update
sudo apt-get install virtualbox-5.2

Install KubeCtl
================
sudo apt-get update && sudo apt-get install -y apt-transport-https
sudo apt install curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo touch /etc/apt/sources.list.d/kubernetes.list 
echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubectl

Installing minikube
====================
curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.28.2/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
chmod +x minikube 
sudo mv minikube /usr/local/bin/

=============================================
kubernetes on single node with virtualbox
=============================================
sudo apt install docker.io

curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube
chmod +x minikube 
sudo mv minikube /usr/local/bin/

curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl

export MINIKUBE_WANTUPDATENOTIFICATION=false
export MINIKUBE_WANTREPORTERRORPROMPT=false
export MINIKUBE_HOME=$HOME
export CHANGE_MINIKUBE_NONE_USER=true
mkdir -p $HOME/.kube
touch $HOME/.kube/config

export KUBECONFIG=$HOME/.kube/config
sudo -E /usr/local/bin/minikube start --vm-driver=none

# waits until kubectl can access the api server that Minikube has created
for i in {1..150}; do # timeout for 5 minutes
   kubectl get po &> /dev/null
   if [ $? -ne 1 ]; then
      break
  fi
  sleep 2
done

# kubectl commands are now able to interact with Minikube 


Installing Go
================
- downlaod golang: 
             https://golang.org/dl/

- copy downloaded golang repo to /usr/local/
- set GOROOT: 
             GOROOT is go installation directory i.e. /usr/local/go/bin/
             export PATH=$PATH:/usr/local/go/bin
- set GOPATH : 
             GOPATH is environment variable which specifies the location of your workspace(working directory) 
             i.e. directory where go code is stored. 
             It defaults to a directory named go inside your home directory, so $HOME/go on Unix
             cd $HOME   (ex, /home/sheel)
             mkdir go
             export GOPATH=$HOME/go

***********************************************************************************************************************
K8S Code commit commands:
***********************************************************************************************************************
  git remote add upstream https://github.com/kubernetes/cloud-provider-openstack
  git remote -v
  git fetch upstream
  git checkout master
  git rebase upstream/master
  git checkout -b LogIssueContributors
  git fetch upstream
  git rebase upstream/master

  git commit -a

  git push -f origin LogIssueContributors

  git config --global user.name "Sheel Rana"
  git config --global user.email "ranasheel2000@gmail.com"
  git commit --amend --reset-author
  git log
  git push --force
  git push -f origin LogIssueContributors
  
***********************************************************************************************************************
*********************************       Kubernetes resource create            *****************************************
***********************************************************************************************************************

Create a pod for a container:
===========================

apiVersion: v1
kind: Pod
metadata:
  name: sheel-pod
  labels:
    zone: prod
    version: v1
    name: sheel-pod
spec:
  containers:
  - name: sheel-ctr
    image: myimage:v0.5
    command: ["sh", "-c", "tail -f /dev/null"]
    ports:
    - containerPort: 5000
      name: http
      protocol: TCP 




Expose a pod:
=============
kubectl expose pod sheel-pod --type=NodePort --port=8080
kubectl expose deployment sheel-depolyment-1 --port=8080 --target-port=

NodePort Service:
================
apiVersion: v1
kind: Service
metadata:
  name: NodePortService
spec:
  type: NodePort
  selector:
    name: sheel-pod
  ports:
    - protocol: TCP
      port: 80            # this is service port
      targetPort: 5000    # this is container port
      nodePort: 32231     # this is node port exposed through nodePort service.


Ingress rule:   Ingress rule routes user request to specific service.
=============
                
1.)Name-Based Virtual Hosting Ingress rule:
   ----------------------------------------
    Following ingress rule specify the route;
                - if user makes request for ranasheel2000.github.com, ingress rule will routes request to svc-1 service.
                - if user makes request for kubernetes.github.com, ingress will routes request to svc-2 service.
ingress.yaml
------------
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: web-ingress
  namespace: default
spec:
  rules:
  - host: ranasheeel2000.github.com
    http:
      paths:
      - backend:
          serviceName: svc-1
          servicePort: 80
  - host: kubernetes.github.com
    http:
      paths:
      - backend:
          serviceName: svc-2
          servicePort: 80
2.) Fan Out Ingress rule:
     In this rule, we can specify the doamin name and can route requests according to preeceeding url.
     For ex, github.com/ranasheel2000 and github.com/kubernetes
                - if user makes request for github.com/ranasheel2000, ingress rule will routes request to svc-1 service.
                - if user makes request for github.com/kubernetes, ingress will routes request to svc-2 service.
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: web-ingress
  namespace: default
spec:
  rules:
  - host: github.com/ranasheel2000
    http:
      paths:
      - backend:
          serviceName: svc-1
          servicePort: 80
  - host: github.com/kubernetes
    http:
      paths:
      - backend:
          serviceName: svc-2
          servicePort: 80


Ingress controller: is used for request forwarding from ingress endpoint to service. 
==================
                   It is an application which watches Master Node's API server for changes in the Ingress resources(Ingress rules) and 
                   updates the Layer 7 Load Balancer accordingly.

Steps to deploy Ingress and access service through Ingress:
=================================================
    1. Deploy Ingress Controller with Minikube
          minikube addons enable ingress
    2. create Ingress Resource: This is done after deploying ingress controller.
          kubectl create -f ingress.yaml

    3. update /etc/hosts, map minikubeIP and URLs to access ser-1 and ser-2.
       We are mapping it to minikubeIP as ingress rules will be created within minikube scope.
          127.0.0.1     localhost.undercloud
          ::1           localhost.undercloud
          {minikube IP} github.com/ranasheel2000 github.com/kubernetes 
    4. List ingress rules:    
          kubectl describe ingress {name-of-ingress-resource}
    
    
Application can be deployed usig [Deployments, Services, Volume Claims, Ingress] etc

Controllers:  A controller uses apiserver to watch the shared state of the cluster and
===========       makes corrective changes to the current state to change it to the desired one.
Ex of different controllers is:
    1. endpoint controller : takes care of the endpoint and their availibility.
    2. namespace controller : 
    3. service account controller : takes care of the services and their desired state.
    4. Replication controller  : takes care of the number of PODs in the kubernetes system.
   
kubectl       -> CLI which manages the PODs etc using API Server.
Controller    -> watches state of cluster using API Server. 
kubelet       -> kubelet is an agent for managing the node and communicating with the Kubernetes master. 
                 It gets pod configuration from apiserver, ensures described containers are up and running.
kubeproxy     -> is a network proxy and load balancer for a service on a single worker node.
                 It takes care of the network routing for TCP and UDP packets.
                 communicates with etcd, to get information about services and write the details about newly created ones.


Basic docker commands:
======================
docker images
docker pull {docker-image name like ngnix}
docker run {container-name}
docker exec -it {container-name} /bin/bash
ctrl+d to run out of container entered through "docker exec -it"


Basic Flow:
=========
1. deploy app
    kubectl run sheel-app --image={docker-image-name} --port=8080
    kubectl get deployment sheel-app
2. set proxy
            $ kubectl proxy
            Starting to serve on 127.0.0.1:8001
            
            Now we can use "route to API" on Pod to communicate.(/api/v1/namespaces/default/pods/<POD_NAME>/proxy/)
            i.e. complete url: "localhost:8001/api/v1/namespaces/default/pods/<POD_NAME>/proxy/"
            Ex,
            $ curl http://localhost:8001/api/v1/namespaces/default/pods/sheel-pod/proxy/
              Hello All! | Running on: sheel-pod | v=1
              
3. access application(on proxy url) using exec
         kubectl exec {PODNAME} {cmd}  
     ex, $ kubectl exec sheel-pod env
  
4. Service(publically expose a deployment): 
   ========
   A Service in Kubernetes is an abstraction which defines a logical set of Pods and a policy by which to access them.
   A Service routes traffic across a set of Pods. 
   Services are the abstraction that allow pods to die and replicate in Kubernetes without impacting your application.
   Discovery and routing among dependent Pods is handled by K8S Services.
   
   The set of Pods targeted by a Service is usually determined by a LabelSelector.
   Although each Pod has a unique IP address, those IPs are not exposed outside the cluster without a Service. 
   Services allow your applications to receive traffic.
   Service Types:
   a. ClusterIP (default) - Exposes the Service on an internal IP in the cluster, reachable from within the cluster.
   b. NodePort            - Exposes the Service on the "same port" of each "selected Node in the cluster" using NAT.
                            POD is accessible from outside the cluster using <NodeIP>:<NodePort>.
   c. LoadBalancer        - Creates an external load balancer in the current cloud and assigns a fixed, external IP to the Service. 
                            Superset of NodePort.
   d. ExternalName        - Exposes the Service using an arbitrary name (specified by externalName in the spec) by returning a CNAME
                            record with the name. 
                            No proxy is used. This needs kube-dns >  V1.7
     List Deployments:
     ----------------
          $ kubectl get deployments
             NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
             kubernetes-bootcamp   1         1         1            1           19s

     Create a Service(#exposing deployment):
     --------------------------------------
          $ kubectl get services
            NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
            kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   33s

          $ kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080    
            service "kubernetes-bootcamp" exposed
     List services:
     --------------
          $ kubectl get services
            NAME                  TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
            kubernetes            ClusterIP   10.96.0.1        <none>        443/TCP          1m
  =======   kubernetes-bootcamp   NodePort    10.105.169.187   <none>        8080:32653/TCP   16s  ========
  
  
          $ kubectl describe services/kubernetes-bootcamp
            Name:                     kubernetes-bootcamp
            Namespace:                default
            Labels:                   run=kubernetes-bootcamp
            Annotations:              <none>
            Selector:                 run=kubernetes-bootcamp
            Type:                     NodePort                      ============
            IP:                       10.104.87.14                 ================
            Port:                     <unset>  8080/TCP              =========
            TargetPort:               8080/TCP
            NodePort:                 <unset>  30775/TCP
            Endpoints:                172.18.0.4:8080,172.18.0.5:8080,172.18.0.6:8080 + 2 more...
            Session Affinity:         None
            External Traffic Policy:  Cluster
            Events:                   <none>

     Check external connectivity to service:
     --------------------------------------
          curl $(minikube ip):$NODE_PORT
          Ex,
            $ curl 172.17.0.74:32653
              Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5dbf48f7d4-ltk7f | v=1


     Using label:     Deployment already creates a label for application, if not specified specifically.
     -----------
           $ kubectl describe deployment
                    Name:                   kubernetes-bootcamp
                    Namespace:              default
                    CreationTimestamp:      Wed, 12 Sep 2018 08:00:03 +0000
                    Labels:                 run=kubernetes-bootcamp           ==================
                    Annotations:            deployment.kubernetes.io/revision=1
                    Selector:               run=kubernetes-bootcamp
                    Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
                    StrategyType:           RollingUpdate
                    MinReadySeconds:        0
                    RollingUpdateStrategy:  1 max unavailable, 1 max surge
             List with specific label:
             ----------------------------
             use -l parameter to list resources like pod, services etc....
             a. PODs:
                 $ kubectl get pods -l run=kubernetes-bootcamp                           #here run=kubernetes-bootcamp is a label
                    NAME                                   READY     STATUS    RESTARTS   AGE
                    kubernetes-bootcamp-5dbf48f7d4-ltk7f   1/1       Running   0          12m
             a. Services:                   
                 $ kubectl get services -l run=kubernetes-bootcamp
                    NAME                  TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
                    kubernetes-bootcamp   NodePort   10.111.87.231   <none>        8080:30548/TCP   13m
             Apply Label:
             ------------
             use label command followed by the <object type> <object name> <new label>
                $ kubectl label pod $POD_NAME app=v1
                   pod "kubernetes-bootcamp-5dbf48f7d4-ltk7f" labeled
                $ kubectl get  pod -l app=v1
                   NAME                                   READY     STATUS    RESTARTS   AGE
                   kubernetes-bootcamp-5dbf48f7d4-ltk7f   1/1       Running   0          25m
                $ kubectl describe pods $POD_NAME
                   Name:           kubernetes-bootcamp-5dbf48f7d4-ltk7f
                   Namespace:      default
                   Node:           host01/172.17.0.74
                   Start Time:     Wed, 12 Sep 2018 08:00:06 +0000
                   Labels:         app=v1
                                   pod-template-hash=1869049380
                                   run=kubernetes-bootcamp
             Delete Service using Label
             --------------------------
             $ kubectl delete service -l run=kubernetes-bootcamp
             This will delete the service but application will still be running.
             Same can be confirmed by running "kubectl exec -ti $POD_NAME curl localhost:8080"


Scaling: is done by increasing number of "Replicas of PODs" to handle the increased traffic.
=======

   kubectl scale deployments {name of deployment} --replica=4
       $ kubectl scale deployments kubernetes-bootcamp --replicas=5
         deployment "kubernetes-bootcamp" scaled

LoadBalancing:  Service by default has a load balancer.
                We can check if load balancing is done by service or not.
                On each access to deployment, different POD would be serving the request.
                Refer following:
                  $ curl $(minikube ip):$NODE_PORT
                      Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5dbf48f7d4-vtf4q | v=1
                  $ curl $(minikube ip):$NODE_PORT
                      Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5dbf48f7d4-t65xd | v=1
                  $ curl $(minikube ip):$NODE_PORT
                      Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5dbf48f7d4-kn5c7 | v=1


AutoScaling:
============





Rolling updates:    Rolling updates allow Deployments' update to take place with zero downtime by incrementally updating Pods 
===============     instances with new ones. 
                    The new Pods will be scheduled on Nodes with available resources.
                    By default, the maximum number of Pods that can be unavailable during the update and
                               the maximum number of new Pods that can be created,
                    is one. 
                    Both options can be configured to either numbers or percentages (of Pods)

                    Similar to application Scaling, if a Deployment is exposed publicly,
                    the Service will load-balance the traffic only to available Pods during the update

        update to image of Application: Updating image will automatically trigger rolling update operation.
        -------------------------------  
              $ kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2
              
              Status of upudate  can be confirmed 
                a. by checking POD status. Old PODs would be Terminating status.
                     $ kubectl get pods
                      NAME                                   READY     STATUS        RESTARTS   AGE
                      kubernetes-bootcamp-5dbf48f7d4-fgf4q   1/1       Terminating   0          58s
                      kubernetes-bootcamp-5dbf48f7d4-hm9rc   1/1       Terminating   0          58s
                      kubernetes-bootcamp-7689dc585d-dh4q4   1/1       Running       0          11s
                      kubernetes-bootcamp-7689dc585d-swjrg   1/1       Running       0          14s 
                or 
                b. by rollout status command
                    $ kubectl rollout status deployments/kubernetes-bootcamp
                      deployment "kubernetes-bootcamp" successfully rolled out
       undo rolling update:
       --------------------
            $ kubectl rollout undo deployments/kubernetes-bootcamp
       
kubectl commands:
=================
  create         Create a resource from a file or from stdin.
          kubectl create -f ingress.yaml   # we can specify ingress rules in igress.yaml.
          
  expose         Take a replication controller, service, deployment or pod and expose it as a new Kubernetes Service
         kubectl expose pod sheel-pod --type=NodePort --port=8080
         kubectl expose deployment sheel-depolyment-1 --port=8080 --target-port=50

  set            Set specific features on objects
  get            Display one or many resources
         kubectl get pod {name-of-pod}
         kubectl get deployment {name-of-deployment}
         kubectl get service {name-of-service
         kubectl get nodes :It will list all nodes/VMs running which are ok to accept any deployments.
           
  explain        Documentation of resources
  edit           Edit a resource on the server
  delete         Delete resources by filenames, stdin, resources and names, or by resources and label selector

Deploy Commands:
  run            Deploy a application(sheel-app) by using any image on the cluster
         kubectl run sheel-app --image={any-image-name} --port=8080
  get            list all current deployments on cluster. 
         $ kubectl get deployments
              NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
              sheel-app             1         1         1            0           8s

  run-container  Run a particular image on the cluster. This command is deprecated, use "run" instead
  rollout        Manage the rollout of a resource
  rolling-update Perform a rolling update of the given ReplicationController
  scale          Set a new size for a Deployment, ReplicaSet, Replication Controller, or Job
  autoscale      Auto-scale a Deployment, ReplicaSet, or ReplicationController

          
              
Cluster Management Commands:
  certificate    Modify certificate resources.
  cluster-info   Display cluster info
  top            Display Resource (CPU/Memory/Storage) usage.
  cordon         Mark node as unschedulable
  uncordon       Mark node as schedulable
  drain          Drain node in preparation for maintenance
  taint          Update the taints on one or more nodes
  
Troubleshooting and Debugging Commands:
  describe       Show details of a specific resource or group of resources
                 can be used with node, pods, deployments resources.
          kubectl describe pods : will describe all pods.
          kubectl describe pod sheel-pod   : will describe sepcific(sheel-pod) only.
          
          kubectl describe pod/{pod-name}                  or kubectl describe pod {pod-name}
          kubectl describe deployments/{deployment-name}   or kubectl describe deployments {deployment-name}
          kubectl describe services/{service-name}         or kubectl describe services/{service-name} 
  
  logs           print the logs from a container in a pod
          kubectl logs
          $ kubectl logs sheel-pod
            Sheel App Started At: 2018-09-12T04:46:42.191Z | Running On:  sheel-pod
          
  attach         Attach to a running container
  exec           Execute a command in a container
            kubectl exec {PODNAME} {cmd}  
            ex, 
            $ kubectl exec sheel-pod env
            PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            HOSTNAME=sheel-pod
            KUBERNETES_SERVICE_HOST=10.96.0.1
            KUBERNETES_SERVICE_PORT=443
            KUBERNETES_SERVICE_PORT_HTTPS=443
            KUBERNETES_PORT=tcp://10.96.0.1:443
            KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443
            KUBERNETES_PORT_443_TCP_PROTO=tcp
            KUBERNETES_PORT_443_TCP_PORT=443
            KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1
            NPM_CONFIG_LOGLEVEL=info
            NODE_VERSION=6.3.1
            HOME=/root
         root@sheel-pod:/# /# exit
         exit
        exec using bash shell:
        ----------------------
            $ kubectl exec -ti $POD_NAME bash
            root@sheel-pod:/#
            
            root@sheel-pod:/# env            
              NODE_VERSION=1.2.6
              HOSTNAME=sheel-pod
              KUBERNETES_PORT_443_TCP_PORT=443
              KUBERNETES_PORT=tcp://10.96.0.1:443
              TERM=xterm
              KUBERNETES_SERVICE_PORT=443
              KUBERNETES_SERVICE_HOST=10.96.0.1
              NPM_CONFIG_LOGLEVEL=info
              PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
              PWD=/
              SHLVL=1
              HOME=/root
              KUBERNETES_PORT_443_TCP_PROTO=tcp
              KUBERNETES_SERVICE_PORT_HTTPS=443
              KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1
              KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443
              _=/usr/bin/env
              root@sheel-pod:/# 
              
  port-forward   Forward one or more local ports to a pod
  proxy          Run a proxy to the Kubernetes API server
            kubectl proxy : it will create proxy server to communicate with PODs/deployments/applicatoins through kubernetes API server.
                            kubectl proxy retruns api server url and port which can be used to communicate with different resources on worker node.
            $ kubectl proxy
            Starting to serve on 127.0.0.1:8001
            
            Now we can use route to API of the Pod to communicate.(/api/v1/namespaces/default/pods/<POD_NAME>/proxy/)
            i.e. complete url: "localhost:8001/api/v1/namespaces/default/pods/<POD_NAME>/proxy/"
            Ex,
            $ curl http://localhost:8001/api/v1/namespaces/default/pods/sheel-pod/proxy/
              Hello All! | Running on: sheel-pod | v=1
             
  cp             Copy files and directories to and from containers.
  auth           Inspect authorization

Advanced Commands:
  apply          Apply a configuration to a resource by filename or stdin
  patch          Update field(s) of a resource using strategic merge patch
  replace        Replace a resource by filename or stdin
  convert        Convert config files between different API versions
  
Settings Commands:
  label          Update the labels on a resource
  annotate       Update the annotations on a resource
  completion     Output shell completion code for the specified shell (bash or
zsh)

Other Commands:
  api-versions   Print the supported API versions on the server, in the form of "group/version"
  config         Modify kubeconfig files
  help           Help about any command
  plugin         Runs a command-line plugin
  version        Print the client and server version information
  




